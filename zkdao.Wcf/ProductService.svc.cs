 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Reflection;
using zkdao.Application;
using zkdao.Domain;
using zic_dotnet;
using log4net;

namespace zkdao.Wcf {
	public class ProductService : IProductService {
		private readonly IProductService productService = IocLocator.Instance.GetImple<IProductService>();
				public ProductData ProductGetByID(Guid ID) {
			try {
				return productService.ProductGetByID(ID);
			}
			catch(Exception ex) {
				ILog Log = LogManager.GetLogger("AppService", MethodBase.GetCurrentMethod().DeclaringType);
				Log.Error(ex);
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
				public Pager<ProductData> ProductGetPager(Int32 pageIndex, Int32 pageSize) {
			try {
				return productService.ProductGetPager(pageIndex, pageSize);
			}
			catch(Exception ex) {
				ILog Log = LogManager.GetLogger("AppService", MethodBase.GetCurrentMethod().DeclaringType);
				Log.Error(ex);
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
				public ProductData ProductSubmit(ProductData subInfo, Boolean force) {
			try {
				return productService.ProductSubmit(subInfo, force);
			}
			catch(Exception ex) {
				ILog Log = LogManager.GetLogger("AppService", MethodBase.GetCurrentMethod().DeclaringType);
				Log.Error(ex);
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
				public void ProductApproved(Guid ID) {
			try {
				 productService.ProductApproved(ID);
			}
			catch(Exception ex) {
				ILog Log = LogManager.GetLogger("AppService", MethodBase.GetCurrentMethod().DeclaringType);
				Log.Error(ex);
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
				public void ProductUpdate(ProductData dataObject) {
			try {
				 productService.ProductUpdate(dataObject);
			}
			catch(Exception ex) {
				ILog Log = LogManager.GetLogger("AppService", MethodBase.GetCurrentMethod().DeclaringType);
				Log.Error(ex);
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
			}
}