<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)zkdao.Application\bin\$(ConfigurationName)\zkdao.Application.dll" #>
<#@ Assembly Name="$(SolutionDir)zkdao.Domain\bin\$(ConfigurationName)\zkdao.Domain.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="zkdao.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.Collections.Generic;
using System.ServiceModel;
using zkdao.Application;
using zkdao.Domain;
using zic_dotnet;

namespace zkdao.Wcf {
	public class UserService : IUserApplication {
		private readonly IUserApplication userServiceImpl = IocLocator.Instance.GetService<IUserApplication>();
		<#foreach (MethodInfo method in typeof(IUserApplication).GetMethods()) {#>
		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>) {
			try {
				<#if(method.ReturnType != typeof(void)){#>return<#}#> userServiceImpl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
	}
}


