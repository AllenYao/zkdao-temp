 

// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.Collections.Generic;
using System.ServiceModel;
using zkdao.Application;
using zkdao.Domain;
using zic_dotnet;

namespace zkdao.Wcf {
	public class UserService : IUserService {
		private readonly IUserService userService = IocLocator.Instance.GetService<IUserService>();
				public UserData UserGetByID(Guid ID) {
			try {
				return userService.UserGetByID(ID);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public UserData UserGetByEmail(String email) {
			try {
				return userService.UserGetByEmail(email);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Pager<UserData> UserGetPager(Int32 pageNumber, Int32 pageSize) {
			try {
				return userService.UserGetPager(pageNumber, pageSize);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Guid UserCreat(UserData dataObject) {
			try {
				return userService.UserCreat(dataObject);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public Boolean UserValidate(String email, String password) {
			try {
				return userService.UserValidate(email, password);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
		public void UpdateCustomer(String email, UserData dataObject) {
			try {
				 userService.UpdateCustomer(email, dataObject);
			}
			catch(Exception ex) {
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
	}
}


